// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SarajevoAir.Infrastructure.Data;

#nullable disable

namespace SarajevoAir.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922200725_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SarajevoAir.Domain.Entities.DailyAggregate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AvgAqi")
                        .HasColumnType("decimal(5,1)");

                    b.Property<decimal?>("AvgCo")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("AvgNo2")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("AvgO3")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("AvgPm10")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("AvgPm25")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("AvgSo2")
                        .HasColumnType("decimal(8,3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxAqi")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaxCo")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MaxNo2")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MaxO3")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MaxPm10")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MaxPm25")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MaxSo2")
                        .HasColumnType("decimal(8,3)");

                    b.Property<int?>("MinAqi")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinCo")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MinNo2")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MinO3")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MinPm10")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MinPm25")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("MinSo2")
                        .HasColumnType("decimal(8,3)");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .HasDatabaseName("IX_DailyAggregates_Date");

                    b.HasIndex("LocationId", "Date")
                        .IsUnique()
                        .HasDatabaseName("UX_DailyAggregates_Location_Date");

                    b.ToTable("DailyAggregates");
                });

            modelBuilder.Entity("SarajevoAir.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Lat")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Lon")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("openaq");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId");

                    b.HasIndex("Lat", "Lon");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SarajevoAir.Domain.Entities.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AqiCategory")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Co")
                        .HasColumnType("decimal(8,3)");

                    b.Property<int?>("ComputedAqi")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("No2")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("O3")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("Pm10")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal?>("Pm25")
                        .HasColumnType("decimal(8,3)");

                    b.Property<string>("RawJson")
                        .HasColumnType("jsonb");

                    b.Property<decimal?>("So2")
                        .HasColumnType("decimal(8,3)");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TimestampUtc")
                        .HasDatabaseName("IX_Measurements_Timestamp");

                    b.HasIndex("LocationId", "ComputedAqi")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_Measurements_Location_AQI");

                    b.HasIndex("LocationId", "TimestampUtc")
                        .IsUnique()
                        .IsDescending(false, true)
                        .HasDatabaseName("UX_Measurements_Location_Timestamp");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("SarajevoAir.Domain.Entities.DailyAggregate", b =>
                {
                    b.HasOne("SarajevoAir.Domain.Entities.Location", "Location")
                        .WithMany("DailyAggregates")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SarajevoAir.Domain.Entities.Measurement", b =>
                {
                    b.HasOne("SarajevoAir.Domain.Entities.Location", "Location")
                        .WithMany("Measurements")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SarajevoAir.Domain.Entities.Location", b =>
                {
                    b.Navigation("DailyAggregates");

                    b.Navigation("Measurements");
                });
#pragma warning restore 612, 618
        }
    }
}
