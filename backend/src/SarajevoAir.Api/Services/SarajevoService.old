using System.Text.Json;
using SarajevoAir.Api.Dtos;

namespace SarajevoAir.Api.Services;

public interface ISarajevoService
{
    Task<LiveAqiResponse> GetLiveAsync(bool forceFresh = false, CancellationToken        };
    }

    private static (string Category, string Color, string HealthMessage) GetAqiInfo(int aqi)
    {
        return aqi switch
        {
            <= 50 => ("Good", "#00E400", "Air quality is considered satisfactory, and air pollution poses little or no risk."),
            <= 100 => ("Moderate", "#FFFF00", "Air quality is acceptable for most people. However, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution."),
            <= 150 => ("Unhealthy for Sensitive Groups", "#FF7E00", "Members of sensitive groups may experience health effects. The general public is not likely to be affected."),
            <= 200 => ("Unhealthy", "#FF0000", "Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects."),
            <= 300 => ("Very Unhealthy", "#8F3F97", "Health warnings of emergency conditions. The entire population is more likely to be affected."),
            _ => ("Hazardous", "#7E0023", "Health alert: everyone may experience more serious health effects.")
        };
    }

    private static string MapDominantPollutant(string? pollutant)
    {
        return pollutant?.ToLowerInvariant() switch
        {
            "pm25" => "PM2.5",
            "pm10" => "PM10",
            "no2" => "NO2",
            "o3" => "O3",
            "so2" => "SO2",
            "co" => "CO",
            _ => "Unknown"
        };
    }
}ncellationToken = default);
    Task<ForecastResponse> GetForecastAsync(bool forceFresh = false, CancellationToken cancellationToken = default);
    Task<SarajevoCompleteDto> GetCompleteAsync(bool forceFresh = false, CancellationToken cancellationToken = default);
}

public record SarajevoCompleteDto(
    LiveAqiResponse LiveData,
    ForecastResponse ForecastData,
    DateTime Timestamp
);

public class SarajevoService : ISarajevoService
{
    private readonly HttpClient _httpClient;
    private readonly ILogger<SarajevoService> _logger;

    public SarajevoService(HttpClient httpClient, ILogger<SarajevoService> logger)
    {
        _httpClient = httpClient;
        _logger = logger;
    }

    public async Task<LiveAqiResponse> GetLiveAsync(bool forceFresh = false, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching real WAQI data for Sarajevo (forceFresh: {ForceFresh})", forceFresh);

        try
        {
            const string sarajevoStationId = "@9267";
            const string apiToken = "4017a1c616179160829bd7e3abb9cc9c8449958e";
            var apiUrl = $"https://api.waqi.info/feed/{sarajevoStationId}/?token={apiToken}";
            
            _logger.LogDebug("Calling WAQI API for Sarajevo: {ApiUrl}", apiUrl);
            
            var response = await _httpClient.GetStringAsync(apiUrl, cancellationToken);
            var waqiResponse = System.Text.Json.JsonSerializer.Deserialize<WaqiApiResponse>(response, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                PropertyNameCaseInsensitive = true
            });

            if (waqiResponse?.Status != "ok" || waqiResponse.Data == null)
            {
                throw new InvalidOperationException("WAQI API returned invalid response for Sarajevo");
            }

            var data = waqiResponse.Data;
            
            // Map WAQI response to our DTO
            var measurements = new List<MeasurementDto>();
            
            if (data.Iaqi != null)
            {
                if (data.Iaqi.Pm25 != null) measurements.Add(new MeasurementDto("PM2.5", data.Iaqi.Pm25.V, "μg/m³"));
                if (data.Iaqi.Pm10 != null) measurements.Add(new MeasurementDto("PM10", data.Iaqi.Pm10.V, "μg/m³"));
                if (data.Iaqi.No2 != null) measurements.Add(new MeasurementDto("NO2", data.Iaqi.No2.V, "μg/m³"));
                if (data.Iaqi.O3 != null) measurements.Add(new MeasurementDto("O3", data.Iaqi.O3.V, "μg/m³"));
                if (data.Iaqi.So2 != null) measurements.Add(new MeasurementDto("SO2", data.Iaqi.So2.V, "μg/m³"));
                if (data.Iaqi.Co != null) measurements.Add(new MeasurementDto("CO", data.Iaqi.Co.V, "mg/m³"));
            }

            // Calculate AQI category and color from numeric AQI
            var (category, color, healthMessage) = GetAqiInfo(data.Aqi);

            var timestamp = DateTime.TryParse(data.Time.Iso, out var parsedTime) ? parsedTime : DateTime.UtcNow;

            _logger.LogInformation("Successfully retrieved WAQI data for Sarajevo, AQI: {Aqi}", data.Aqi);

            return new LiveAqiResponse(
                City: "Sarajevo",
                OverallAqi: data.Aqi,
                AqiCategory: category,
                Color: color,
                HealthMessage: healthMessage,
                Timestamp: timestamp,
                Measurements: measurements.AsReadOnly(),
                DominantPollutant: MapDominantPollutant(data.Dominentpol)
            );
        }
        catch (HttpRequestException ex)
        {
            _logger.LogError(ex, "HTTP error while fetching WAQI data for Sarajevo");
            throw new InvalidOperationException("Failed to fetch air quality data for Sarajevo: Network error", ex);
        }
        catch (JsonException ex)
        {
            _logger.LogError(ex, "JSON parsing error while processing WAQI data for Sarajevo");
            throw new InvalidOperationException("Failed to parse air quality data for Sarajevo: Invalid data format", ex);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unexpected error while fetching WAQI data for Sarajevo");
            throw;
        }
    }

    public async Task<ForecastResponse> GetForecastAsync(bool forceFresh = false, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching real WAQI forecast data for Sarajevo (forceFresh: {ForceFresh})", forceFresh);

        try
        {
            const string sarajevoStationId = "@9267";
            const string apiToken = "4017a1c616179160829bd7e3abb9cc9c8449958e";
            var apiUrl = $"https://api.waqi.info/feed/{sarajevoStationId}/?token={apiToken}";
            
            _logger.LogDebug("Calling WAQI API for Sarajevo forecast: {ApiUrl}", apiUrl);
            
            var response = await _httpClient.GetStringAsync(apiUrl, cancellationToken);
            var waqiResponse = System.Text.Json.JsonSerializer.Deserialize<WaqiApiResponse>(response, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                PropertyNameCaseInsensitive = true
            });

            if (waqiResponse?.Status != "ok" || waqiResponse.Data == null)
            {
                throw new InvalidOperationException("WAQI API returned invalid response for Sarajevo forecast");
            }

            var forecastData = new List<ForecastDayDto>();

            // Process WAQI forecast data if available
            if (waqiResponse.Data.Forecast?.Daily != null)
            {
                var daily = waqiResponse.Data.Forecast.Daily;
                
                // Get PM2.5 forecast (most relevant for AQI)
                var pm25Forecast = daily.Pm25;
                if (pm25Forecast != null && pm25Forecast.Length > 0)
                {
                    for (int i = 0; i < Math.Min(5, pm25Forecast.Length); i++)
                    {
                        var dayForecast = pm25Forecast[i];
                        var aqi = (int)Math.Round(dayForecast.Avg);
                        var (category, color, _) = GetAqiInfo(aqi);
                        
                        forecastData.Add(new ForecastDayDto(
                            Date: DateOnly.ParseExact(dayForecast.Day, "yyyy-MM-dd"),
                            Aqi: aqi,
                            Category: category,
                            Color: color
                        ));
                    }
                }
            }

            // If no forecast data available, create fallback based on current conditions
            if (forecastData.Count == 0)
            {
                _logger.LogWarning("No forecast data available from WAQI API, creating fallback forecast");
                var currentAqi = waqiResponse.Data.Aqi;
                
                for (int i = 0; i < 5; i++)
                {
                    // Create slight variations around current AQI
                    var variation = Random.Shared.Next(-10, 11);
                    var forecastAqi = Math.Max(0, currentAqi + variation);
                    var (category, color, _) = GetAqiInfo(forecastAqi);
                    
                    forecastData.Add(new ForecastDayDto(
                        Date: DateOnly.FromDateTime(DateTime.Today.AddDays(i)),
                        Aqi: forecastAqi,
                        Category: category,
                        Color: color
                    ));
                }
            }

            _logger.LogInformation("Successfully retrieved forecast data for Sarajevo, {Count} days", forecastData.Count);

            return new ForecastResponse(
                City: "Sarajevo",
                ForecastData: new ForecastData(forecastData.AsReadOnly()),
                GeneratedAt: DateTime.UtcNow
            );
        }
        catch (HttpRequestException ex)
        {
            _logger.LogError(ex, "HTTP error while fetching WAQI forecast data for Sarajevo");
            throw new InvalidOperationException("Failed to fetch forecast data for Sarajevo: Network error", ex);
        }
        catch (JsonException ex)
        {
            _logger.LogError(ex, "JSON parsing error while processing WAQI forecast data for Sarajevo");
            throw new InvalidOperationException("Failed to parse forecast data for Sarajevo: Invalid data format", ex);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unexpected error while fetching WAQI forecast data for Sarajevo");
            throw;
        }
    }

    public async Task<CompleteAqiResponse> GetCompleteAsync(bool forceFresh = false, CancellationToken cancellationToken = default)
    {
        _logger.LogInformation("Fetching complete WAQI data for Sarajevo (forceFresh: {ForceFresh})", forceFresh);
        
        // Call both live and forecast APIs
        var liveTask = GetLiveAsync(forceFresh, cancellationToken);
        var forecastTask = GetForecastAsync(forceFresh, cancellationToken);
        
        await Task.WhenAll(liveTask, forecastTask);
        
        var liveData = await liveTask;
        var forecastData = await forecastTask;
        
        return new CompleteAqiResponse(
            LiveData: liveData,
            ForecastData: forecastData,
            RetrievedAt: DateTime.UtcNow
        );
    }
}
        {
            new ForecastDayDto(
                Date: DateTime.Today.AddDays(1).ToString("yyyy-MM-dd"),
                Aqi: 75,
                Category: "Moderate",
                Color: "#FFFF00",
                Pollutants: new ForecastDayPollutants(
                    Pm25: new PollutantRangeDto(35, 25, 45),
                    Pm10: new PollutantRangeDto(65, 50, 80),
                    O3: null
                )
            ),
            new ForecastDayDto(
                Date: DateTime.Today.AddDays(2).ToString("yyyy-MM-dd"),
                Aqi: 82,
                Category: "Moderate", 
                Color: "#FFFF00",
                Pollutants: new ForecastDayPollutants(
                    Pm25: new PollutantRangeDto(42, 30, 55),
                    Pm10: new PollutantRangeDto(70, 55, 85),
                    O3: null
                )
            ),
            new ForecastDayDto(
                Date: DateTime.Today.AddDays(3).ToString("yyyy-MM-dd"),
                Aqi: 95,
                Category: "Moderate",
                Color: "#FFFF00",
                Pollutants: new ForecastDayPollutants(
                    Pm25: new PollutantRangeDto(48, 35, 60),
                    Pm10: new PollutantRangeDto(75, 60, 90),
                    O3: new PollutantRangeDto(25, 15, 35)
                )
            ),
            new ForecastDayDto(
                Date: DateTime.Today.AddDays(4).ToString("yyyy-MM-dd"),
                Aqi: 68,
                Category: "Moderate",
                Color: "#FFFF00",
                Pollutants: new ForecastDayPollutants(
                    Pm25: new PollutantRangeDto(28, 20, 38),
                    Pm10: new PollutantRangeDto(55, 45, 70),
                    O3: new PollutantRangeDto(30, 20, 40)
                )
            ),
            new ForecastDayDto(
                Date: DateTime.Today.AddDays(5).ToString("yyyy-MM-dd"),
                Aqi: 45,
                Category: "Good",
                Color: "#22C55E",
                Pollutants: new ForecastDayPollutants(
                    Pm25: new PollutantRangeDto(18, 12, 25),
                    Pm10: new PollutantRangeDto(40, 30, 50),
                    O3: new PollutantRangeDto(35, 25, 45)
                )
            )
        };

        return new ForecastResponse(
            City: "Sarajevo",
            Forecast: testForecast,
            Timestamp: DateTime.UtcNow
        );
    }

    public async Task<SarajevoCompleteDto> GetCompleteAsync(bool forceFresh = false, CancellationToken cancellationToken = default)
    {
        var liveTask = GetLiveAsync(forceFresh, cancellationToken);
        var forecastTask = GetForecastAsync(forceFresh, cancellationToken);

        await Task.WhenAll(liveTask, forecastTask);

        return new SarajevoCompleteDto(
            await liveTask,
            await forecastTask,
            DateTime.UtcNow
        );
    }
}
